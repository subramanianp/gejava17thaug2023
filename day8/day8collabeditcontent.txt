https://drive.google.com/drive/folders/12b3u2CI5nbTxQFAzQNawIFnzxGBEGzIh?usp=sharing

https://github.com/subramanianp/gejava17thaug2023.git

<employee>
<name>Arjun</name>
<designation>Architect</designation>
</employee>


package com.ge.rest.domain;

import java.util.List;

import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class Employees {
    private List<Employee> employee;

    public List<Employee> getEmployee() {
        return employee;
    }

    public void setEmployee(List<Employee> employee) {
        this.employee = employee;
    }

    public Employees(List<Employee> employee) {
        super();
        this.employee = employee;
    }

    public Employees() {
        super();
        // TODO Auto-generated constructor stub
    }
    
    
}


@GetMapping(produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<Employees> getAllEmployees()
    {
        List<Employee> employees= service.getAllEmployees();
        
        return new ResponseEntity<>(new Employees(employees) ,HttpStatus.OK);
    }
    
    
    
package com.ge.rest.domain;

import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class Response {
        private String errorMessage;
        public String getErrorMessage() {
            return errorMessage;
        }
        public void setErrorMessage(String errorMessage) {
            this.errorMessage = errorMessage;
        }
        public Response() {
            super();
            // TODO Auto-generated constructor stub
        }
        public Response(String errorMessage) {
            super();
            this.errorMessage = errorMessage;
        }
        

}

package com.ge.rest.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ge.rest.domain.Employee;
import com.ge.rest.domain.Employees;
import com.ge.rest.domain.Response;
import com.ge.rest.service.EmployeeService;

@RestController
@RequestMapping("/emp")
public class EmployeeController {
    @Autowired
    private EmployeeService service;
    
    @GetMapping(path = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_XML_VALUE
    })
    public ResponseEntity<?> getEmployee(@PathVariable("id") int empId)
    {
        Employee employee= service.getEmployeeDetails(empId);
        if(employee==null) {
            Response response= new Response("No employee with id "+empId);
            return new ResponseEntity<Response>(response,HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(employee,HttpStatus.OK);
    }

    @GetMapping(produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<Employees> getAllEmployees()
    {
        List<Employee> employees= service.getAllEmployees();
        
        return new ResponseEntity<>(new Employees(employees) ,HttpStatus.OK);
    }
    
    @PostMapping(consumes = {MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_XML_VALUE
    },produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String>  addEmployee(@RequestBody Employee e)
    {
        String responseMsg=service.addEmployee(e);
        return new ResponseEntity<>(responseMsg,HttpStatus.CREATED);
    }
    @PutMapping(path="/{id}",consumes = {MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_XML_VALUE
    },produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<?>  updateEmployee(@PathVariable("id")int empId, @RequestBody Employee e)
    {
        int id=service.updateEmployee(empId, e);
        if(id==-1) {
            Response response= new Response("No employee with id "+empId);
            return new ResponseEntity<Response>(response,HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(new Response("Employee with id "+empId+" updated successfully"),
                HttpStatus.OK);
    }
    @DeleteMapping(path="/{id}",produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<?>  removeEmployee(@PathVariable("id")int empId)
    {
        int id=service.removeEmployee(empId);
        if(id==-1) {
            Response response= new Response("No employee with id "+empId);
            return new ResponseEntity<Response>(response,HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(new Response("Employee with id "+empId+" removed successfully"),
                HttpStatus.OK);
    }
    
}



package com.ge.rest.service;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

import org.springframework.stereotype.Service;

import com.ge.rest.domain.Employee;

@Service
public class EmployeeService {
    private TreeMap<Integer, Employee> empData=new TreeMap<>();
    
    public EmployeeService() {
        empData.put(1001, new Employee(1001, "Arjun", "Accountant"));
        empData.put(1002, new Employee(1002, "Surya", "Developer"));
        empData.put(1003, new Employee(1003, "Rajiv", "Accountant"));
        empData.put(1004, new Employee(1004, "Deva", "Architect"));
    }
    
    public Employee getEmployeeDetails(int id)
    {
        return empData.get(id);
    }
    
    public List<Employee> getAllEmployees()
    {
        return new ArrayList<>(empData.values());
    }
    
    public String addEmployee(Employee e)
    {
        int nextId=empData.lastKey()+1;
        e.setId(nextId);
        empData.put(nextId, e);
        return "Employee with id "+nextId+" added successfully";
    }
    public int updateEmployee(int id,Employee e)
    {
        Employee e1=empData.get(id);
        if(e1==null) {
            return -1;
        }
        e1.setName(e.getName());
        e1.setDesignation(e.getDesignation());
        
        return id;
    }
    
    public int removeEmployee(int id)
    {
        Employee e1=empData.get(id);
        if(e1==null) {
            return -1;
        }
        empData.remove(id);
        
        return id;
    }
    
}



package com.ge.rest.domain;

import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class Response {
        private String message;
        
        public String getMessage() {
            return message;
        }
        public void setMessage(String message) {
            this.message = message;
        }
        public Response() {
            super();
            // TODO Auto-generated constructor stub
        }
        public Response(String message) {
            super();
            this.message = message;
        }
        
        

}


package com.ge.rest.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ge.rest.domain.Employee;
import com.ge.rest.domain.Employees;
import com.ge.rest.domain.Response;
import com.ge.rest.service.EmployeeService;

@RestController
@RequestMapping("/emp")
public class EmployeeController {
    @Autowired
    private EmployeeService service;
    
    @GetMapping(path = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_XML_VALUE
    })
    public ResponseEntity<?> getEmployee(@PathVariable("id") int empId)
    {
        Employee employee= service.getEmployeeDetails(empId);
        if(employee==null) {
            Response response= new Response("No employee with id "+empId);
            return new ResponseEntity<Response>(response,HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(employee,HttpStatus.OK);
    }

    @GetMapping(produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<Employees> getAllEmployees()
    {
        List<Employee> employees= service.getAllEmployees();
        
        return new ResponseEntity<>(new Employees(employees) ,HttpStatus.OK);
    }
    
    @PostMapping(consumes = {MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_XML_VALUE
    },produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String>  addEmployee(@RequestBody Employee e)
    {
        String responseMsg=service.addEmployee(e);
        return new ResponseEntity<>(responseMsg,HttpStatus.CREATED);
    }
    @PutMapping(path="/{id}",consumes = {MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_XML_VALUE
    },produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?>  updateEmployee(@PathVariable("id")int empId, @RequestBody Employee e)
    {
        int id=service.updateEmployee(empId, e);
        if(id==-1) {
            Response response= new Response("No employee with id "+empId);
            return new ResponseEntity<Response>(response,HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(new Response("Employee with id "+empId+" updated successfully"),
                HttpStatus.OK);
    }
    @DeleteMapping(path="/{id}",produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<?>  removeEmployee(@PathVariable("id")int empId)
    {
        int id=service.removeEmployee(empId);
        if(id==-1) {
            Response response= new Response("No employee with id "+empId);
            return new ResponseEntity<Response>(response,HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(new Response("Employee with id "+empId+" removed successfully"),
                HttpStatus.OK);
    }
    
}

<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.39</version>
</dependency>

application.properties

spring.datasource.url=jdbc:mysql://localhost:3306/trainingdb
spring.datasource.username=root
spring.datasource.password==root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update



package com.ge.restwithjpa.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="emp_jpa_tbl")
public class EmployeeDTO {
    @Id
    @Column(name="emp_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int empId;
    @Column(name ="emp_name")
    private String empName;
    private String designation;
    
    public EmployeeDTO(int empId, String empName, String designation) {
        super();
        this.empId = empId;
        this.empName = empName;
        this.designation = designation;
    }
    public EmployeeDTO() {
        super();
        // TODO Auto-generated constructor stub
    }
    public int getEmpId() {
        return empId;
    }
    public void setEmpId(int empId) {
        this.empId = empId;
    }
    public String getEmpName() {
        return empName;
    }
    public void setEmpName(String empName) {
        this.empName = empName;
    }
    public String getDesignation() {
        return designation;
    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }
    
    
    
    

}




package com.ge.restwithjpa.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ge.restwithjpa.entity.EmployeeDTO;

@Repository
public interface EmployeeRepository extends JpaRepository<EmployeeDTO, Integer>{

}




package com.ge.restwithjpa.domain;

import javax.xml.bind.annotation.XmlRootElement;

import com.ge.restwithjpa.entity.EmployeeDTO;

@XmlRootElement
public class Employee {
    private int id;
    private String name;
    private String designation;
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getDesignation() {
        return designation;
    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }
    public Employee(int id, String name, String designation) {
        super();
        this.id = id;
        this.name = name;
        this.designation = designation;
    }
    public Employee() {
        super();
        // TODO Auto-generated constructor stub
    }
    public Employee(EmployeeDTO dto)
    {
        this(dto.getEmpId(),dto.getEmpName(),dto.getDesignation());
    }

}



package com.ge.restwithjpa.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ge.restwithjpa.domain.Employee;
import com.ge.restwithjpa.entity.EmployeeDTO;
import com.ge.restwithjpa.repository.EmployeeRepository;



@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository repository;
    
    public Employee getEmployeeDetails(int id)
    {
        Optional<EmployeeDTO> opt=repository.findById(id);
        if(opt.isPresent()) {
            EmployeeDTO dto=opt.get();
            return new Employee(dto);
        }
        return null;
    }
    
    public List<Employee> getAllEmployees()
    {
        List<EmployeeDTO> dtoList=repository.findAll();
        List<Employee> employees=new ArrayList<>();
        for(EmployeeDTO dto:dtoList) {
            employees.add(new Employee(dto));
        }
        return employees;
    }
    
    public String addEmployee(EmployeeDTO e)
    {
        EmployeeDTO dto=repository.saveAndFlush(e); //inserts the row and flushes the data and
        //returns the entity which is inserted along with generated id
        
        return "Employee with id "+dto.getEmpId()+" added successfully";
    }
    public int updateEmployee(int id,EmployeeDTO e)
    {
        Optional<EmployeeDTO> opt=repository.findById(id);
        if(opt.isPresent()) {
            EmployeeDTO e1=opt.get();
            e1.setEmpName(e.getEmpName());
            e1.setDesignation(e.getDesignation());
            repository.save(e1);
            return id;
        }
        return -1;
    }
    
    public int removeEmployee(int id)
    {
        Optional<EmployeeDTO> opt=repository.findById(id);
        if(opt.isPresent()) {
            repository.delete(opt.get());
            return id;
        }
        return -1;

        
    }
    
}


package com.ge.restwithjpa.domain;

import javax.xml.bind.annotation.XmlRootElement;

import com.ge.restwithjpa.entity.EmployeeDTO;

@XmlRootElement
public class Employee {
    private int id;
    private String name;
    private String designation;
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getDesignation() {
        return designation;
    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }
    public Employee(int id, String name, String designation) {
        super();
        this.id = id;
        this.name = name;
        this.designation = designation;
    }
    public Employee() {
        super();
        // TODO Auto-generated constructor stub
    }
    public Employee(EmployeeDTO dto)
    {
        this(dto.getEmpId(),dto.getEmpName(),dto.getDesignation());
    }

}


package com.ge.restwithjpa.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ge.restwithjpa.domain.Employee;
import com.ge.restwithjpa.entity.EmployeeDTO;
import com.ge.restwithjpa.repository.EmployeeRepository;



@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository repository;
    
    public Employee getEmployeeDetails(int id)
    {
        Optional<EmployeeDTO> opt=repository.findById(id);
        if(opt.isPresent()) {
            EmployeeDTO dto=opt.get();
            return new Employee(dto);
        }
        return null;
    }
    
    public List<Employee> getAllEmployees()
    {
        List<EmployeeDTO> dtoList=repository.findAll();
        List<Employee> employees=new ArrayList<>();
        for(EmployeeDTO dto:dtoList) {
            employees.add(new Employee(dto));
        }
        return employees;
    }
    
    public String addEmployee(Employee e)
    {
        
        EmployeeDTO dto=repository.saveAndFlush(new EmployeeDTO(e)); //inserts the row and flushes the data and
        //returns the entity which is inserted along with generated id
        
        return "Employee with id "+dto.getEmpId()+" added successfully";
    }
    public int updateEmployee(int id,Employee e)
    {
        Optional<EmployeeDTO> opt=repository.findById(id);
        if(opt.isPresent()) {
            EmployeeDTO e1=opt.get();
            e1.setEmpName(e.getName());
            e1.setDesignation(e.getDesignation());
            repository.save(e1);
            return id;
        }
        return -1;
    }
    
    public int removeEmployee(int id)
    {
        Optional<EmployeeDTO> opt=repository.findById(id);
        if(opt.isPresent()) {
            repository.delete(opt.get());
            return id;
        }
        return -1;

        
    }
    
}


mysql> show tables;

mysql> describe emp_jpa_tbl;



<dependencies>
      <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.0.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.15.2</version>
</dependency>

  </dependencies>
  
  package com.ge.training.restclients;

import java.util.Arrays;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.ge.restwithjpa.domain.Employee;

public class GetEmpClient {
public static void main(String[] args) {
    RestTemplate template=new RestTemplate();
    String url="http://localhost:8080/emp/1";
    HttpHeaders headers=new HttpHeaders();
    headers.put("Accept", Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
    HttpEntity<String> entity=new HttpEntity<>(headers);
    //sends the actual request
    ResponseEntity<Employee> responseEntity=template.exchange(url, HttpMethod.GET,entity,
            Employee.class);
    Employee employee=responseEntity.getBody();
    System.out.println("Name:"+employee.getName());
    System.out.println("Designation:"+employee.getDesignation());
    
}
}


mysql> insert into emp_jpa_tbl(emp_name,designation) values("Priya","Accountant");
Query OK, 1 row affected (0.00 sec)

mysql> insert into emp_jpa_tbl(emp_name,designation) values("Arvind","Architect");


package com.ge.training.restclients;

import java.util.Arrays;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.ge.restwithjpa.domain.Employee;
import com.ge.restwithjpa.domain.Employees;

public class GetEmpListClient {
public static void main(String[] args) {
    RestTemplate template=new RestTemplate();
    String url="http://localhost:8080/emp";
    HttpHeaders headers=new HttpHeaders();
    headers.put("Accept", Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
    HttpEntity<String> entity=new HttpEntity<>(headers);
    //sends the actual request
    ResponseEntity<Employees> responseEntity=template.exchange(url, HttpMethod.GET,entity,
            Employees.class);
    Employees employees=responseEntity.getBody();
    for(Employee employee:employees.getEmployee()) {
        System.out.println(employee.getId()+"\t"+employee.getName()+
                "\t"+employee.getDesignation());
    }
}
}


package com.ge.training.restclients;

import java.util.Arrays;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.ge.restwithjpa.domain.Employee;
import com.ge.restwithjpa.domain.Employees;

public class PostClient {
public static void main(String[] args) {
    RestTemplate template=new RestTemplate();
    String url="http://localhost:8080/emp";
    HttpHeaders headers=new HttpHeaders();
    headers.put("Content-Type", Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
    Employee employee=new Employee();
    employee.setName("Rakesh");
    employee.setDesignation("Accountant");
    HttpEntity<Employee> entity=new HttpEntity<>(employee,headers);
    //sends the actual request
    ResponseEntity<String> responseEntity=template.exchange(url, HttpMethod.POST,entity,
            String.class);
    System.out.println("Response from server: "+responseEntity.getBody());
    
}
}


package com.ge.training.restclients;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.ge.restwithjpa.domain.Response;

public class DeleteClient {
public static void main(String[] args) {
    RestTemplate template=new RestTemplate();
    String url="http://localhost:8080/emp/1";
    ResponseEntity<Response> responseEntity=template.exchange(url, HttpMethod.DELETE,
            new HttpEntity<String>(new HttpHeaders()),
            Response.class);
    System.out.println("Response from server: "+responseEntity.getBody().getMessage());
    
}
}

http://localhost:8001/item/101

http://localhost:8002/itemorder/proxy/101/qty/5


https://tcheck.co/2HY6Q6


