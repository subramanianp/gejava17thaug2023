primitive data types:

predefined types.
Defined as keywords.
Not predefined classes.

Integers:

byte----------1 byte
short---------2 bytes
int-----------4 bytes
long----------8 bytes

floating point:
float---------4 bytes 
double--------8 bytes

boolean-------1 byte

char---------2 bytes

All other types are called reference type.
For example, String is a class and any variable of String type is called a reference variable.

int a=10;//a is primitive type
String s="hello";//s is reference type


primitive types are passed by value.
reference variables are passed by reference.


A a1=new A(10);
A a2=a1;//both the reference variables point to the same object.
a1.increment();
a1.print();//prints 11
a2.print();//prints 11

a2.increment();
a1.print();//prints 12
a2.print();//prints 12

When an object is not refered by any reference variable, it becomes eligible for 
garbage collection.

The garbage collection is taken care by the jvm, but the developer should take care of
making the objects to be eligible for garbage collection.

The finalize() method of the object gets invoked automatically when it is garbage collected.

The java.lang package is imported by default.
so classes within java.lang package like System,String,Object and etc can be used without importing.


Inheritance:

"has a" relationship--------------composition
"is a" relationship---------------inheritance----parent child relationship between classes.

class Address{
	private int plotNumber;
	private String street;
	private String location;
	private String city;
}

class Person{
	private String name;
	private int age;
	private Address address;//has a relationship.
}


class Employee extends Person{ //is a relationship
	private int empId;
	private double salary;
}

Person is the parent class
Employee is the child class

In java terms, the parent class is called the super class and the child class is called the sub class.


Tight coupling-----------a change in one class requires a major change in another class.
Loose coupling-----------a change in one class does not require a change/requires a minor change in another
class.

Coupling is a measure of how one component depends on another component.



Access specifiers

private
default
protected
public

		within 		outside the class	outside the package	outside the package 
		same class	within package		within sub class	within non sub class

private		Yes			No			No			No

default		Yes			Yes			No			No

protected	Yes			Yes			Yes			No	

public		Yes			Yes			Yes			Yes


private<----------default<----------protected<---------------public


Object:

The object class is the super class of all the classes in java.
It is defined within java.lang package.

class A{
}

is equivalent to 

class A extends Object{
	A()
	{
	super();//invokes the super class constructor
	}
}

Methods in Object class:

toString()
finalize()
wait()
notify()
notifyAll()
hashCode()
equals()



class A{
}

A a1=new A();
println(a1)// is equivalent to println(a1.toString())

class Object{
public String toString()
}


Polymorphism:

One can behave in multiple forms.

1. Compile time polymorphism-----------supported by method overloading.
2. Run time polymorphism---------------supported by method overriding.


class A{
	void print(){
	}

	void print(int a){
	}

	void print(double a){
	}
	void print(int a,int b){
	}
}

A a1=new A();
a1.print(20);
a1.print(20.45);
a1.print();
a1.print(10,20);

Method overriding:

If the same method is defined in both super class and sub class, it is called method overriding.

while overriding, the parameter list and the return type should match.


class A{
	int test(int x,double y) //overridden method
	{
	}
}


class B extends A{
	int test(int x,double y)//overriding method
	{
	}
}

It is legal that a super class variable can point to a sub class object.

A a1=new B(); //line 1
a1.test(10,34.55);//line 2 ---the method to be invoked is decided only during runtime. ie only during runtime
it comes to know that a1 points to object of type B and invokes test method of B.
a1=new A();//line 3
a1.test(10,34.55);//line 4


Annotation:

Annotations are used to provide supplemental information to program elements like
classes,variables,methods and constructors

@Override annotation:
It is a method level annotation. It is used to specify that the current method overrides the super 
class method. It generates a compilation error if the overriding rules are not followed.
It can avoid accidental mistakes.

instanceof operator:

Used to find the type of the object during runtime.

ref_variable instanceof Class-----------returns true or false.



e instanceof Employee-------returns true if a variable of type Employee can hold the object e.

when instanceof operator is used for checking the type,
the subclass type should be checked first and then the super class type.



static:

The static keyword can be used with variables and methods.
The static member is common all the objects of the class.
ie it is treated as member of the class and not the member of the specific object.
It creates only one copy of the variable even though multiple objects are created.

class A{
	int i;
}

A a1=new A();
A a2=new A();
A a3=new A();
a1.i=10;
a2.i=20;
a3.i=30;

System.out.println(a1.i+a2.i+a3.i); //prints 60

class A{
	static int i;
}

A a1=new A();
A a2=new A();
A a3=new A();
a1.i=10;
a2.i=20;
a3.i=30;
System.out.println(a1.i+a2.i+a3.i);//prints 90

System.out.println(A.i);

The static method can't access the non static members of the class.
Use of this or super keyword is allowed in static method.

class A{
	int i;
	static int j;
	static void test()
	{
	System.out.println(j);
	System.out.println(i);//error
	}
}


abstract:

abstract means incomplete.

When a method does not have a body, it should be declared as abstract.

The class which contains the abstract method, should also be declared as abstract.

Abstract class can't be instantiated.

The non abstract class is also called concrete class.
Concrete classes can be instantiated.

The subclass of an abstract should implement all the abstract methods of the super class.

package pack1;
public class A{
}

package pack2;
//import pack1.A;
class A{
}
class B extends pack1.A{
}

class C extends B{

}


